}
stormData$CROPDMG<-mapply(transformToRegNumbers, X=stormData$CROPDMGEXP, Y=stormData$CROPDMG)
transformToRegNumbers<-function(x,y){
if(x=="M"|x=="m")
y*1000000
else if(x=="K"|x=="k")
y*1000
else if(x=="B"|x=="b")
y*1000000000
else
y
}
stormData$CROPDMG<-mapply(transformToRegNumbers, x=stormData$CROPDMGEXP, y=stormData$CROPDMG)
unique(stormData$PROPDMGEXP)
stormData$PROPDMG[stormData$PROPDMGEXP==""]
stormData$PROPDMG[stormData$PROPDMGEXP=="+"]
weird<-stormData[stormData$PROPDMGEXP=="+"]
weird<-stormData[stormData$PROPDMGEXP=="+",]
View(weird)
unique(stormData$PROPDMGEXP)
weird<-stormData[stormData$PROPDMGEXP=="0",]
View(weird)
weird<-stormData[stormData$PROPDMGEXP=="5",]
View(weird)
weird<-stormData[stormData$PROPDMGEXP=="?",]
View(weird)
weird<-stormData[stormData$PROPDMGEXP=="h",]
View(weird)
weird<-stormData[stormData$PROPDMGEXP=="H",]
View(weird)
weird<-stormData[stormData$PROPDMGEXP=="-",]
View(weird)
weird<-stormData[which(stormData$PROPDMG=="5")]
weird<-stormData[which(stormData$PROPDMG=="5"),]
unique(stormData$PROPDMGEXP)
View(weird)
View(weird)
weird<-stormData[which(stormData$PROPDMGEXP=="5"),]
View(weird)
weird<-stormData[which(stormData$PROPDMGEXP=="2"),]
View(weird)
weird<-stormData[which(stormData$PROPDMGEXP=="K"||stormData$PROPDMGEXP=="M"||stormData$PROPDMGEXP=="B"||stormData$PROPDMGEXP=="m"  ),]
View(weird)
weird<-stormData[which(stormData$PROPDMGEXP=="K")
,]
weird<-rbind(weird, stormData[which(stormData$PROPDMGEXP=="M"),]
)
weird<-rbind(weird, stormData[which(stormData$PROPDMGEXP=="B"),])
weird<-rbind(weird, stormData[which(stormData$PROPDMGEXP=="m"  ),])
View(weird)
weird<-stormData[which(stormData$PROPDMGEXP=="2"),]
View(weird)
weird<-stormData[which(stormData$PROPDMGEXP=="5"),]
weird<-stormData[which(stormData$PROPDMGEXP=="5"),]
View(weird)
weird<-stormData[which(stormData$PROPDMGEXP=="h"),]
weird<-stormData[which(stormData$PROPDMGEXP=="h"),]
View(weird)
weird<-stormData[which(stormData$PROPDMGEXP=="H"),]
View(weird)
#setting up the environment
library(ggplot2)
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
InjuriesByEventType<-aggregate(stormData$INJURIES, by=list(stormData$EVTYPE), FUN=sum)
names(InjuriesByEventType)<-c("Event", "Injuries")
InjuriesByEventType<-InjuriesByEventType[order(-InjuriesByEventType$Injuries),]
InjuriesByEventType[1:10,]
#setting up the environment
library(ggplot2)
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
propertyData<-stormData[-which(stormData$PROPDMGEXP=="H"),]
propertyData<-propertyData[-which(propertyData$PROPDMGEXP=="h"),]
PropertyDamageByEventType<-aggregate(propertyData$PROPDMG, by=list(propertyData$EVTYPE), FUN=sum)
names(PropertyDamageByEventType)<-c("Event", "Damage")
PropertyDamageByEventType<-PropertyDamageByEventType[order(-PropertyDamageByEventType$Damage),]
PropertyDamageByEventType[1:10,]
#setting up the environment
library(ggplot2)
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}fatalities<-ggplot(stormData[which(stormData$EVTYPE=="TORNADO"),], aes(BGN_DATE, FATALITIES, colour="red"))+ geom_line() +
#setting up the environment
library(ggplot2)
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
fatalities<-ggplot(stormData[which(stormData$EVTYPE=="TORNADO"),], aes(BGN_DATE, FATALITIES, colour="red"))+ geom_line() +
+ ggtitle("Fatalities")+ xlab("1950-2011")
#setting up the environment
library(ggplot2)
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
fatalities<-ggplot(stormData[which(stormData$EVTYPE=="TORNADO"),], aes(BGN_DATE, FATALITIES, colour="red"))+ geom_line()
+ ggtitle("Fatalities")+ xlab("1950-2011")
#setting up the environment
library(ggplot2)
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
fatalities<-ggplot(stormData[which(stormData$EVTYPE=="TORNADO"),], aes(BGN_DATE, FATALITIES, colour="red"))+ geom_line() + ggtitle("Fatalities")+ xlab("1950-2011")
#setting up the environment
library(ggplot2)
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
fatalities<-ggplot(stormData[which(stormData$EVTYPE=="TORNADO"),], aes(BGN_DATE, FATALITIES, colour="red"))+ geom_line() + ggtitle("Fatalities")+ xlab("1950-2011")
injuries<-ggplot(stormData[which(stormData$EVTYPE=="TORNADO"),], aes(BGN_DATE, INJURIES, colour="blue"))+ geom_line()+   xlab("1950-2011") + ggtitle("Injuries")
crop<-ggplot(stormData[which(stormData$EVTYPE=="TORNADO"),], aes(BGN_DATE, CROPDMG, colour="darkgreen"))+ geom_line()+xlab("1950-2011") + ggtitle("Crop Damage")
property<-ggplot(stormData[which(stormData$EVTYPE=="TORNADO"),], aes(BGN_DATE, CROPDMG, colour="darkblue"))+ geom_line()+   xlab("1950-2011") + ggtitle("Crop Damage")
#setting up the environment
library(ggplot2)
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
fatalities<-ggplot(stormData[which(stormData$EVTYPE=="TORNADO"),], aes(BGN_DATE, FATALITIES, colour="red"))+ geom_line() + ggtitle("Fatalities")+ xlab("1950-2011")
injuries<-ggplot(stormData[which(stormData$EVTYPE=="TORNADO"),], aes(BGN_DATE, INJURIES, colour="blue"))+ geom_line()+   xlab("1950-2011") + ggtitle("Injuries")
crop<-ggplot(stormData[which(stormData$EVTYPE=="TORNADO"),], aes(BGN_DATE, CROPDMG, colour="darkgreen"))+ geom_line()+xlab("1950-2011") + ggtitle("Crop Damage")
property<-ggplot(stormData[which(stormData$EVTYPE=="TORNADO"),], aes(BGN_DATE, CROPDMG, colour="darkblue"))+ geom_line()+   xlab("1950-2011") + ggtitle("Crop Damage")
multiplot(fatalities,injuries, crop, property, cols=2)
#setting up the environment
library(ggplot2)
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
#creating the plots
fatalities<-ggplot(stormData[which(stormData$EVTYPE=="TORNADO"),], aes(BGN_DATE, FATALITIES))+ geom_line() + ggtitle("Fatalities")+ xlab("1950-2011") +ylab("")
injuries<-ggplot(stormData[which(stormData$EVTYPE=="TORNADO"),], aes(BGN_DATE, INJURIES))+ geom_line()+   xlab("1950-2011") + ggtitle("Injuries")+ylab("")
crop<-ggplot(stormData[which(stormData$EVTYPE=="TORNADO"),], aes(BGN_DATE, CROPDMG))+ geom_line()+xlab("1950-2011") + ggtitle("Crop Damage")+ylab("")
property<-ggplot(stormData[which(stormData$EVTYPE=="TORNADO"),], aes(BGN_DATE, CROPDMG)+ geom_line()+   xlab("1950-2011") + ggtitle("Crop Damage")+ylab("")
multiplot(fatalities,injuries, crop, property, cols=2)
#setting up the environment
library(ggplot2)
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
#creating the plots
fatalities<-ggplot(stormData[which(stormData$EVTYPE=="TORNADO"),], aes(BGN_DATE, FATALITIES))+ geom_line() + ggtitle("Fatalities")+ xlab("1950-2011") +ylab("")
injuries<-ggplot(stormData[which(stormData$EVTYPE=="TORNADO"),], aes(BGN_DATE, INJURIES))+ geom_line()+   xlab("1950-2011") + ggtitle("Injuries")+ylab("")
crop<-ggplot(stormData[which(stormData$EVTYPE=="TORNADO"),], aes(BGN_DATE, CROPDMG))+ geom_line()+xlab("1950-2011") + ggtitle("Crop Damage")+ylab("")
property<-ggplot(stormData[which(stormData$EVTYPE=="TORNADO"),], aes(BGN_DATE, PROPDMG))+ geom_line()+   xlab("1950-2011") + ggtitle("Crop Damage")+ylab("")
multiplot(fatalities,injuries, crop, property, cols=2)
rm(list=ls())
setup_twitter_oauth("Nx6Jskoqj3cYx2RePyqOQLbFG",
"7Y6Qxk1BWIrJU1GWED0Pt254T2USpe1hPie2rzmsyCJgsHHNU8",
"4828145161-GYZY7lZe6QIkIPeAJtaQsja0XagoCBgwkWoQ3h4",
"sui3lsvvxcpbm4Ir5mJiJGkmGZwxyb0IkfvCJSx8RI0Ak")
library(dplyr)
library(purrr)
library(twitteR)
# You'd need to set global options with an authenticated app
#using direct authentication
setup_twitter_oauth("Nx6Jskoqj3cYx2RePyqOQLbFG",
"7Y6Qxk1BWIrJU1GWED0Pt254T2USpe1hPie2rzmsyCJgsHHNU8",
"4828145161-GYZY7lZe6QIkIPeAJtaQsja0XagoCBgwkWoQ3h4",
"sui3lsvvxcpbm4Ir5mJiJGkmGZwxyb0IkfvCJSx8RI0Ak")
rm(list=ls())
setwd("C:/Users/Galina/Downloads/DataScience/HR")
#reading in the data
data<-read.csv("HR.csv")
set.seed(123)
testIndeces<-sample(nrow(data), floor(nrow(data)*0.33))
train<-data[-testIndeces,]
test<-data[testIndeces,]
rm("data")
#no missing values, so nothing to do there
#Random forest
#chart coordinate table
library(randomForest)
rf_model<-randomForest(as.factor(left)~satisfaction_level+last_evaluation+
number_project + average_montly_hours +
time_spend_company + Work_accident + promotion_last_5years + salary,
data=train)
plot(rf_model)
legend('topright', colnames(rf_model$err.rate), col=1:3, fill=1:3)
#Get Importance
importance<-importance(rf_model)
varImportance<-data.frame(Variables=row.names(importance),
Importance = round(importance[,"MeanDecreaseGini"],2))
#Create a rank variable based on importance
rankImportance <- varImportance %>%
mutate(Rank = paste0('#',dense_rank(desc(Importance))))
library(ggplot2)
library(ggthemes)
library(scales)
# Use ggplot2 to visualize the relative importance of variables
ggplot(rankImportance, aes(x = reorder(Variables, Importance),
y = Importance, fill = Importance)) +
geom_bar(stat='identity') +
geom_text(aes(x = Variables, y = 0.5, label = Rank),
hjust=0, vjust=0.55, size = 4, colour = 'red') +
labs(x = 'Variables') +
coord_flip()
install.packages("ggthemes")
library(ggthemes)
rankImportance <- varImportance %>%
mutate(Rank = paste0('#',dense_rank(desc(Importance))))
library(dplyr)
rankImportance <- varImportance %>%mutate(Rank = paste0('#',dense_rank(desc(Importance))))
ggplot(rankImportance, aes(x = reorder(Variables, Importance),
y = Importance, fill = Importance)) +
geom_bar(stat='identity') +
geom_text(aes(x = Variables, y = 0.5, label = Rank),
hjust=0, vjust=0.55, size = 4, colour = 'red') +
labs(x = 'Variables') +
coord_flip()+
theme_few()
testForPrediction<-test[,-left]
View(test)
testForPrediction<-test[,-7]
prediction<-predict(rf_model, testForPrediction)
prediction<-prediction-1
prediction<-predict(rf_model, testForPrediction)
prediction<-as.numeric(prediction)-1
success<-prediction==test$left
successRate<-length(which(success))/length(test)
length(which(success))
length(test)
successRate<-length(which(success))/nrow(test)
correlations<-cor(train)
str(train)
unique(train$sales)
source('C:/Users/Galina/Downloads/DataScience/HR/HR.R')
source('C:/Users/Galina/Downloads/DataScience/HR/HR.R')
test<-test[,-1]
train<-train[-1]
rm(list=ls())
source('C:/Users/Galina/Downloads/DataScience/HR/HR.R')
ggplot(rankImportance, aes(x = reorder(Variables, Importance),
y = Importance, fill = Importance)) +
geom_bar(stat='identity') +
geom_text(aes(x = Variables, y = 0.5, label = Rank),
hjust=0, vjust=0.55, size = 4, colour = 'red') +
labs(x = 'Variables') +
coord_flip()+
theme_few()
numberOfProjects<-cor(train$number_project, train$left)
correlations<-cor(train)
str(train)
train$salary<-as.numeric(train$salary)
correlations<-cor(train[,-10])
install.packages("corrplot")
correlations<-cor(correlData)
correlData<-train[,-10]
correlations<-cor(correlData)
num.cols <- sapply(correlData,is.numeric)
correlations<-cor(correlData[,num.cols])
corrplot(correlations, methos="pie")
library(corrplot)
corrplot(correlations, methos="pie")
ggplot(rankImportance, aes(x = reorder(Variables, Importance),
y = Importance, fill = Importance)) +
geom_bar(stat='identity') +
geom_text(aes(x = Variables, y = 0.5, label = Rank),
hjust=0, vjust=0.55, size = 4, colour = 'red') +
labs(x = 'Variables') +
coord_flip()+
theme_few()
